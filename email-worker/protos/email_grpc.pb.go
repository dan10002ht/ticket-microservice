// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: protos/email.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EmailService_SendVerificationEmail_FullMethodName    = "/email.EmailService/SendVerificationEmail"
	EmailService_SendVerificationReminder_FullMethodName = "/email.EmailService/SendVerificationReminder"
	EmailService_ResendVerificationEmail_FullMethodName  = "/email.EmailService/ResendVerificationEmail"
	EmailService_CreateEmailJob_FullMethodName           = "/email.EmailService/CreateEmailJob"
	EmailService_CreateTrackedEmailJob_FullMethodName    = "/email.EmailService/CreateTrackedEmailJob"
	EmailService_GetEmailJob_FullMethodName              = "/email.EmailService/GetEmailJob"
	EmailService_GetJobStatus_FullMethodName             = "/email.EmailService/GetJobStatus"
	EmailService_UpdateEmailJobStatus_FullMethodName     = "/email.EmailService/UpdateEmailJobStatus"
	EmailService_ListEmailJobs_FullMethodName            = "/email.EmailService/ListEmailJobs"
	EmailService_GetJobStats_FullMethodName              = "/email.EmailService/GetJobStats"
	EmailService_GetQueueStats_FullMethodName            = "/email.EmailService/GetQueueStats"
	EmailService_GetEmailTemplate_FullMethodName         = "/email.EmailService/GetEmailTemplate"
	EmailService_ListEmailTemplates_FullMethodName       = "/email.EmailService/ListEmailTemplates"
	EmailService_CreateEmailTemplate_FullMethodName      = "/email.EmailService/CreateEmailTemplate"
	EmailService_UpdateEmailTemplate_FullMethodName      = "/email.EmailService/UpdateEmailTemplate"
	EmailService_DeleteEmailTemplate_FullMethodName      = "/email.EmailService/DeleteEmailTemplate"
	EmailService_GetEmailTracking_FullMethodName         = "/email.EmailService/GetEmailTracking"
	EmailService_UpdateEmailTracking_FullMethodName      = "/email.EmailService/UpdateEmailTracking"
	EmailService_SendPasswordResetEmail_FullMethodName   = "/email.EmailService/SendPasswordResetEmail"
	EmailService_Health_FullMethodName                   = "/email.EmailService/Health"
)

// EmailServiceClient is the client API for EmailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Email Service provides comprehensive email management including job queuing,
// template management, and specialized verification flows
type EmailServiceClient interface {
	// Email Verification (Specialized methods)
	SendVerificationEmail(ctx context.Context, in *SendVerificationEmailRequest, opts ...grpc.CallOption) (*SendVerificationEmailResponse, error)
	SendVerificationReminder(ctx context.Context, in *SendVerificationReminderRequest, opts ...grpc.CallOption) (*SendVerificationReminderResponse, error)
	ResendVerificationEmail(ctx context.Context, in *ResendVerificationEmailRequest, opts ...grpc.CallOption) (*SendVerificationEmailResponse, error)
	// Email Job Management (Generic methods)
	CreateEmailJob(ctx context.Context, in *CreateEmailJobRequest, opts ...grpc.CallOption) (*CreateEmailJobResponse, error)
	CreateTrackedEmailJob(ctx context.Context, in *CreateEmailJobRequest, opts ...grpc.CallOption) (*CreateEmailJobResponse, error)
	GetEmailJob(ctx context.Context, in *GetEmailJobRequest, opts ...grpc.CallOption) (*GetEmailJobResponse, error)
	GetJobStatus(ctx context.Context, in *GetJobStatusRequest, opts ...grpc.CallOption) (*GetJobStatusResponse, error)
	UpdateEmailJobStatus(ctx context.Context, in *UpdateEmailJobStatusRequest, opts ...grpc.CallOption) (*UpdateEmailJobStatusResponse, error)
	ListEmailJobs(ctx context.Context, in *ListEmailJobsRequest, opts ...grpc.CallOption) (*ListEmailJobsResponse, error)
	GetJobStats(ctx context.Context, in *GetJobStatsRequest, opts ...grpc.CallOption) (*GetJobStatsResponse, error)
	GetQueueStats(ctx context.Context, in *GetQueueStatsRequest, opts ...grpc.CallOption) (*GetQueueStatsResponse, error)
	// Email Templates
	GetEmailTemplate(ctx context.Context, in *GetEmailTemplateRequest, opts ...grpc.CallOption) (*GetEmailTemplateResponse, error)
	ListEmailTemplates(ctx context.Context, in *ListEmailTemplatesRequest, opts ...grpc.CallOption) (*ListEmailTemplatesResponse, error)
	CreateEmailTemplate(ctx context.Context, in *CreateEmailTemplateRequest, opts ...grpc.CallOption) (*CreateEmailTemplateResponse, error)
	UpdateEmailTemplate(ctx context.Context, in *UpdateEmailTemplateRequest, opts ...grpc.CallOption) (*UpdateEmailTemplateResponse, error)
	DeleteEmailTemplate(ctx context.Context, in *DeleteEmailTemplateRequest, opts ...grpc.CallOption) (*DeleteEmailTemplateResponse, error)
	// Email Tracking
	GetEmailTracking(ctx context.Context, in *GetEmailTrackingRequest, opts ...grpc.CallOption) (*GetEmailTrackingResponse, error)
	UpdateEmailTracking(ctx context.Context, in *UpdateEmailTrackingRequest, opts ...grpc.CallOption) (*UpdateEmailTrackingResponse, error)
	// Email forgot password
	SendPasswordResetEmail(ctx context.Context, in *SendPasswordResetEmailRequest, opts ...grpc.CallOption) (*SendPasswordResetEmailResponse, error)
	// Health & Monitoring (Single health endpoint)
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type emailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailServiceClient(cc grpc.ClientConnInterface) EmailServiceClient {
	return &emailServiceClient{cc}
}

func (c *emailServiceClient) SendVerificationEmail(ctx context.Context, in *SendVerificationEmailRequest, opts ...grpc.CallOption) (*SendVerificationEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendVerificationEmailResponse)
	err := c.cc.Invoke(ctx, EmailService_SendVerificationEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) SendVerificationReminder(ctx context.Context, in *SendVerificationReminderRequest, opts ...grpc.CallOption) (*SendVerificationReminderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendVerificationReminderResponse)
	err := c.cc.Invoke(ctx, EmailService_SendVerificationReminder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) ResendVerificationEmail(ctx context.Context, in *ResendVerificationEmailRequest, opts ...grpc.CallOption) (*SendVerificationEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendVerificationEmailResponse)
	err := c.cc.Invoke(ctx, EmailService_ResendVerificationEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) CreateEmailJob(ctx context.Context, in *CreateEmailJobRequest, opts ...grpc.CallOption) (*CreateEmailJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEmailJobResponse)
	err := c.cc.Invoke(ctx, EmailService_CreateEmailJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) CreateTrackedEmailJob(ctx context.Context, in *CreateEmailJobRequest, opts ...grpc.CallOption) (*CreateEmailJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEmailJobResponse)
	err := c.cc.Invoke(ctx, EmailService_CreateTrackedEmailJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) GetEmailJob(ctx context.Context, in *GetEmailJobRequest, opts ...grpc.CallOption) (*GetEmailJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEmailJobResponse)
	err := c.cc.Invoke(ctx, EmailService_GetEmailJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) GetJobStatus(ctx context.Context, in *GetJobStatusRequest, opts ...grpc.CallOption) (*GetJobStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetJobStatusResponse)
	err := c.cc.Invoke(ctx, EmailService_GetJobStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) UpdateEmailJobStatus(ctx context.Context, in *UpdateEmailJobStatusRequest, opts ...grpc.CallOption) (*UpdateEmailJobStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEmailJobStatusResponse)
	err := c.cc.Invoke(ctx, EmailService_UpdateEmailJobStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) ListEmailJobs(ctx context.Context, in *ListEmailJobsRequest, opts ...grpc.CallOption) (*ListEmailJobsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEmailJobsResponse)
	err := c.cc.Invoke(ctx, EmailService_ListEmailJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) GetJobStats(ctx context.Context, in *GetJobStatsRequest, opts ...grpc.CallOption) (*GetJobStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetJobStatsResponse)
	err := c.cc.Invoke(ctx, EmailService_GetJobStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) GetQueueStats(ctx context.Context, in *GetQueueStatsRequest, opts ...grpc.CallOption) (*GetQueueStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQueueStatsResponse)
	err := c.cc.Invoke(ctx, EmailService_GetQueueStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) GetEmailTemplate(ctx context.Context, in *GetEmailTemplateRequest, opts ...grpc.CallOption) (*GetEmailTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEmailTemplateResponse)
	err := c.cc.Invoke(ctx, EmailService_GetEmailTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) ListEmailTemplates(ctx context.Context, in *ListEmailTemplatesRequest, opts ...grpc.CallOption) (*ListEmailTemplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEmailTemplatesResponse)
	err := c.cc.Invoke(ctx, EmailService_ListEmailTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) CreateEmailTemplate(ctx context.Context, in *CreateEmailTemplateRequest, opts ...grpc.CallOption) (*CreateEmailTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEmailTemplateResponse)
	err := c.cc.Invoke(ctx, EmailService_CreateEmailTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) UpdateEmailTemplate(ctx context.Context, in *UpdateEmailTemplateRequest, opts ...grpc.CallOption) (*UpdateEmailTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEmailTemplateResponse)
	err := c.cc.Invoke(ctx, EmailService_UpdateEmailTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) DeleteEmailTemplate(ctx context.Context, in *DeleteEmailTemplateRequest, opts ...grpc.CallOption) (*DeleteEmailTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteEmailTemplateResponse)
	err := c.cc.Invoke(ctx, EmailService_DeleteEmailTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) GetEmailTracking(ctx context.Context, in *GetEmailTrackingRequest, opts ...grpc.CallOption) (*GetEmailTrackingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEmailTrackingResponse)
	err := c.cc.Invoke(ctx, EmailService_GetEmailTracking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) UpdateEmailTracking(ctx context.Context, in *UpdateEmailTrackingRequest, opts ...grpc.CallOption) (*UpdateEmailTrackingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEmailTrackingResponse)
	err := c.cc.Invoke(ctx, EmailService_UpdateEmailTracking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) SendPasswordResetEmail(ctx context.Context, in *SendPasswordResetEmailRequest, opts ...grpc.CallOption) (*SendPasswordResetEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendPasswordResetEmailResponse)
	err := c.cc.Invoke(ctx, EmailService_SendPasswordResetEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, EmailService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailServiceServer is the server API for EmailService service.
// All implementations must embed UnimplementedEmailServiceServer
// for forward compatibility.
//
// Email Service provides comprehensive email management including job queuing,
// template management, and specialized verification flows
type EmailServiceServer interface {
	// Email Verification (Specialized methods)
	SendVerificationEmail(context.Context, *SendVerificationEmailRequest) (*SendVerificationEmailResponse, error)
	SendVerificationReminder(context.Context, *SendVerificationReminderRequest) (*SendVerificationReminderResponse, error)
	ResendVerificationEmail(context.Context, *ResendVerificationEmailRequest) (*SendVerificationEmailResponse, error)
	// Email Job Management (Generic methods)
	CreateEmailJob(context.Context, *CreateEmailJobRequest) (*CreateEmailJobResponse, error)
	CreateTrackedEmailJob(context.Context, *CreateEmailJobRequest) (*CreateEmailJobResponse, error)
	GetEmailJob(context.Context, *GetEmailJobRequest) (*GetEmailJobResponse, error)
	GetJobStatus(context.Context, *GetJobStatusRequest) (*GetJobStatusResponse, error)
	UpdateEmailJobStatus(context.Context, *UpdateEmailJobStatusRequest) (*UpdateEmailJobStatusResponse, error)
	ListEmailJobs(context.Context, *ListEmailJobsRequest) (*ListEmailJobsResponse, error)
	GetJobStats(context.Context, *GetJobStatsRequest) (*GetJobStatsResponse, error)
	GetQueueStats(context.Context, *GetQueueStatsRequest) (*GetQueueStatsResponse, error)
	// Email Templates
	GetEmailTemplate(context.Context, *GetEmailTemplateRequest) (*GetEmailTemplateResponse, error)
	ListEmailTemplates(context.Context, *ListEmailTemplatesRequest) (*ListEmailTemplatesResponse, error)
	CreateEmailTemplate(context.Context, *CreateEmailTemplateRequest) (*CreateEmailTemplateResponse, error)
	UpdateEmailTemplate(context.Context, *UpdateEmailTemplateRequest) (*UpdateEmailTemplateResponse, error)
	DeleteEmailTemplate(context.Context, *DeleteEmailTemplateRequest) (*DeleteEmailTemplateResponse, error)
	// Email Tracking
	GetEmailTracking(context.Context, *GetEmailTrackingRequest) (*GetEmailTrackingResponse, error)
	UpdateEmailTracking(context.Context, *UpdateEmailTrackingRequest) (*UpdateEmailTrackingResponse, error)
	// Email forgot password
	SendPasswordResetEmail(context.Context, *SendPasswordResetEmailRequest) (*SendPasswordResetEmailResponse, error)
	// Health & Monitoring (Single health endpoint)
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedEmailServiceServer()
}

// UnimplementedEmailServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEmailServiceServer struct{}

func (UnimplementedEmailServiceServer) SendVerificationEmail(context.Context, *SendVerificationEmailRequest) (*SendVerificationEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVerificationEmail not implemented")
}
func (UnimplementedEmailServiceServer) SendVerificationReminder(context.Context, *SendVerificationReminderRequest) (*SendVerificationReminderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVerificationReminder not implemented")
}
func (UnimplementedEmailServiceServer) ResendVerificationEmail(context.Context, *ResendVerificationEmailRequest) (*SendVerificationEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendVerificationEmail not implemented")
}
func (UnimplementedEmailServiceServer) CreateEmailJob(context.Context, *CreateEmailJobRequest) (*CreateEmailJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmailJob not implemented")
}
func (UnimplementedEmailServiceServer) CreateTrackedEmailJob(context.Context, *CreateEmailJobRequest) (*CreateEmailJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrackedEmailJob not implemented")
}
func (UnimplementedEmailServiceServer) GetEmailJob(context.Context, *GetEmailJobRequest) (*GetEmailJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailJob not implemented")
}
func (UnimplementedEmailServiceServer) GetJobStatus(context.Context, *GetJobStatusRequest) (*GetJobStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobStatus not implemented")
}
func (UnimplementedEmailServiceServer) UpdateEmailJobStatus(context.Context, *UpdateEmailJobStatusRequest) (*UpdateEmailJobStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmailJobStatus not implemented")
}
func (UnimplementedEmailServiceServer) ListEmailJobs(context.Context, *ListEmailJobsRequest) (*ListEmailJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEmailJobs not implemented")
}
func (UnimplementedEmailServiceServer) GetJobStats(context.Context, *GetJobStatsRequest) (*GetJobStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobStats not implemented")
}
func (UnimplementedEmailServiceServer) GetQueueStats(context.Context, *GetQueueStatsRequest) (*GetQueueStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueueStats not implemented")
}
func (UnimplementedEmailServiceServer) GetEmailTemplate(context.Context, *GetEmailTemplateRequest) (*GetEmailTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailTemplate not implemented")
}
func (UnimplementedEmailServiceServer) ListEmailTemplates(context.Context, *ListEmailTemplatesRequest) (*ListEmailTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEmailTemplates not implemented")
}
func (UnimplementedEmailServiceServer) CreateEmailTemplate(context.Context, *CreateEmailTemplateRequest) (*CreateEmailTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmailTemplate not implemented")
}
func (UnimplementedEmailServiceServer) UpdateEmailTemplate(context.Context, *UpdateEmailTemplateRequest) (*UpdateEmailTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmailTemplate not implemented")
}
func (UnimplementedEmailServiceServer) DeleteEmailTemplate(context.Context, *DeleteEmailTemplateRequest) (*DeleteEmailTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmailTemplate not implemented")
}
func (UnimplementedEmailServiceServer) GetEmailTracking(context.Context, *GetEmailTrackingRequest) (*GetEmailTrackingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailTracking not implemented")
}
func (UnimplementedEmailServiceServer) UpdateEmailTracking(context.Context, *UpdateEmailTrackingRequest) (*UpdateEmailTrackingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmailTracking not implemented")
}
func (UnimplementedEmailServiceServer) SendPasswordResetEmail(context.Context, *SendPasswordResetEmailRequest) (*SendPasswordResetEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPasswordResetEmail not implemented")
}
func (UnimplementedEmailServiceServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedEmailServiceServer) mustEmbedUnimplementedEmailServiceServer() {}
func (UnimplementedEmailServiceServer) testEmbeddedByValue()                      {}

// UnsafeEmailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailServiceServer will
// result in compilation errors.
type UnsafeEmailServiceServer interface {
	mustEmbedUnimplementedEmailServiceServer()
}

func RegisterEmailServiceServer(s grpc.ServiceRegistrar, srv EmailServiceServer) {
	// If the following call pancis, it indicates UnimplementedEmailServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EmailService_ServiceDesc, srv)
}

func _EmailService_SendVerificationEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendVerificationEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendVerificationEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_SendVerificationEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendVerificationEmail(ctx, req.(*SendVerificationEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_SendVerificationReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendVerificationReminderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendVerificationReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_SendVerificationReminder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendVerificationReminder(ctx, req.(*SendVerificationReminderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_ResendVerificationEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendVerificationEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).ResendVerificationEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_ResendVerificationEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).ResendVerificationEmail(ctx, req.(*ResendVerificationEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_CreateEmailJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmailJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).CreateEmailJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_CreateEmailJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).CreateEmailJob(ctx, req.(*CreateEmailJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_CreateTrackedEmailJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmailJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).CreateTrackedEmailJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_CreateTrackedEmailJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).CreateTrackedEmailJob(ctx, req.(*CreateEmailJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_GetEmailJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).GetEmailJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_GetEmailJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).GetEmailJob(ctx, req.(*GetEmailJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_GetJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).GetJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_GetJobStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).GetJobStatus(ctx, req.(*GetJobStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_UpdateEmailJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailJobStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).UpdateEmailJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_UpdateEmailJobStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).UpdateEmailJobStatus(ctx, req.(*UpdateEmailJobStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_ListEmailJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmailJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).ListEmailJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_ListEmailJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).ListEmailJobs(ctx, req.(*ListEmailJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_GetJobStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).GetJobStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_GetJobStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).GetJobStats(ctx, req.(*GetJobStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_GetQueueStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueueStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).GetQueueStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_GetQueueStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).GetQueueStats(ctx, req.(*GetQueueStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_GetEmailTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).GetEmailTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_GetEmailTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).GetEmailTemplate(ctx, req.(*GetEmailTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_ListEmailTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmailTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).ListEmailTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_ListEmailTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).ListEmailTemplates(ctx, req.(*ListEmailTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_CreateEmailTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmailTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).CreateEmailTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_CreateEmailTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).CreateEmailTemplate(ctx, req.(*CreateEmailTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_UpdateEmailTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).UpdateEmailTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_UpdateEmailTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).UpdateEmailTemplate(ctx, req.(*UpdateEmailTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_DeleteEmailTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmailTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).DeleteEmailTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_DeleteEmailTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).DeleteEmailTemplate(ctx, req.(*DeleteEmailTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_GetEmailTracking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailTrackingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).GetEmailTracking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_GetEmailTracking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).GetEmailTracking(ctx, req.(*GetEmailTrackingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_UpdateEmailTracking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailTrackingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).UpdateEmailTracking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_UpdateEmailTracking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).UpdateEmailTracking(ctx, req.(*UpdateEmailTrackingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_SendPasswordResetEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPasswordResetEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendPasswordResetEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_SendPasswordResetEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendPasswordResetEmail(ctx, req.(*SendPasswordResetEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmailService_ServiceDesc is the grpc.ServiceDesc for EmailService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmailService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "email.EmailService",
	HandlerType: (*EmailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendVerificationEmail",
			Handler:    _EmailService_SendVerificationEmail_Handler,
		},
		{
			MethodName: "SendVerificationReminder",
			Handler:    _EmailService_SendVerificationReminder_Handler,
		},
		{
			MethodName: "ResendVerificationEmail",
			Handler:    _EmailService_ResendVerificationEmail_Handler,
		},
		{
			MethodName: "CreateEmailJob",
			Handler:    _EmailService_CreateEmailJob_Handler,
		},
		{
			MethodName: "CreateTrackedEmailJob",
			Handler:    _EmailService_CreateTrackedEmailJob_Handler,
		},
		{
			MethodName: "GetEmailJob",
			Handler:    _EmailService_GetEmailJob_Handler,
		},
		{
			MethodName: "GetJobStatus",
			Handler:    _EmailService_GetJobStatus_Handler,
		},
		{
			MethodName: "UpdateEmailJobStatus",
			Handler:    _EmailService_UpdateEmailJobStatus_Handler,
		},
		{
			MethodName: "ListEmailJobs",
			Handler:    _EmailService_ListEmailJobs_Handler,
		},
		{
			MethodName: "GetJobStats",
			Handler:    _EmailService_GetJobStats_Handler,
		},
		{
			MethodName: "GetQueueStats",
			Handler:    _EmailService_GetQueueStats_Handler,
		},
		{
			MethodName: "GetEmailTemplate",
			Handler:    _EmailService_GetEmailTemplate_Handler,
		},
		{
			MethodName: "ListEmailTemplates",
			Handler:    _EmailService_ListEmailTemplates_Handler,
		},
		{
			MethodName: "CreateEmailTemplate",
			Handler:    _EmailService_CreateEmailTemplate_Handler,
		},
		{
			MethodName: "UpdateEmailTemplate",
			Handler:    _EmailService_UpdateEmailTemplate_Handler,
		},
		{
			MethodName: "DeleteEmailTemplate",
			Handler:    _EmailService_DeleteEmailTemplate_Handler,
		},
		{
			MethodName: "GetEmailTracking",
			Handler:    _EmailService_GetEmailTracking_Handler,
		},
		{
			MethodName: "UpdateEmailTracking",
			Handler:    _EmailService_UpdateEmailTracking_Handler,
		},
		{
			MethodName: "SendPasswordResetEmail",
			Handler:    _EmailService_SendPasswordResetEmail_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _EmailService_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/email.proto",
}
